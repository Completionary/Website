//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;

var ttypes = require('./admin_types');
//HELPER FUNCTIONS AND STRUCTURES

AdminService_addSingleTerm_args = function(args) {
  this.index = null;
  this.ID = null;
  this.inputs = null;
  this.outputField = null;
  this.payload = null;
  this.weight = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.ID !== undefined) {
      this.ID = args.ID;
    }
    if (args.inputs !== undefined) {
      this.inputs = args.inputs;
    }
    if (args.outputField !== undefined) {
      this.outputField = args.outputField;
    }
    if (args.payload !== undefined) {
      this.payload = args.payload;
    }
    if (args.weight !== undefined) {
      this.weight = args.weight;
    }
  }
};
AdminService_addSingleTerm_args.prototype = {};
AdminService_addSingleTerm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.inputs = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = input.readString();
          this.inputs.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.outputField = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.payload = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.weight = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_addSingleTerm_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_addSingleTerm_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  if (this.inputs !== null && this.inputs !== undefined) {
    output.writeFieldBegin('inputs', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.inputs.length);
    for (var iter15 in this.inputs)
    {
      if (this.inputs.hasOwnProperty(iter15))
      {
        iter15 = this.inputs[iter15];
        output.writeString(iter15);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.outputField !== null && this.outputField !== undefined) {
    output.writeFieldBegin('outputField', Thrift.Type.STRING, 4);
    output.writeString(this.outputField);
    output.writeFieldEnd();
  }
  if (this.payload !== null && this.payload !== undefined) {
    output.writeFieldBegin('payload', Thrift.Type.STRING, 5);
    output.writeString(this.payload);
    output.writeFieldEnd();
  }
  if (this.weight !== null && this.weight !== undefined) {
    output.writeFieldBegin('weight', Thrift.Type.I32, 6);
    output.writeI32(this.weight);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_addSingleTerm_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdminService_addSingleTerm_result.prototype = {};
AdminService_addSingleTerm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_addSingleTerm_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_addSingleTerm_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_addTerms_args = function(args) {
  this.index = null;
  this.terms = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.terms !== undefined) {
      this.terms = args.terms;
    }
  }
};
AdminService_addTerms_args.prototype = {};
AdminService_addTerms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size16 = 0;
        var _rtmp320;
        this.terms = [];
        var _etype19 = 0;
        _rtmp320 = input.readListBegin();
        _etype19 = _rtmp320.etype;
        _size16 = _rtmp320.size;
        for (var _i21 = 0; _i21 < _size16; ++_i21)
        {
          var elem22 = null;
          elem22 = new ttypes.SuggestionField();
          elem22.read(input);
          this.terms.push(elem22);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_addTerms_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_addTerms_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.terms !== null && this.terms !== undefined) {
    output.writeFieldBegin('terms', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.terms.length);
    for (var iter23 in this.terms)
    {
      if (this.terms.hasOwnProperty(iter23))
      {
        iter23 = this.terms[iter23];
        iter23.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_addTerms_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdminService_addTerms_result.prototype = {};
AdminService_addTerms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_addTerms_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_addTerms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteSingleTerm_args = function(args) {
  this.index = null;
  this.ID = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.ID !== undefined) {
      this.ID = args.ID;
    }
  }
};
AdminService_deleteSingleTerm_args.prototype = {};
AdminService_deleteSingleTerm_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ID = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteSingleTerm_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteSingleTerm_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.STRING, 2);
    output.writeString(this.ID);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteSingleTerm_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdminService_deleteSingleTerm_result.prototype = {};
AdminService_deleteSingleTerm_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteSingleTerm_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteSingleTerm_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteTerms_args = function(args) {
  this.index = null;
  this.ID = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.ID !== undefined) {
      this.ID = args.ID;
    }
  }
};
AdminService_deleteTerms_args.prototype = {};
AdminService_deleteTerms_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size24 = 0;
        var _rtmp328;
        this.ID = [];
        var _etype27 = 0;
        _rtmp328 = input.readListBegin();
        _etype27 = _rtmp328.etype;
        _size24 = _rtmp328.size;
        for (var _i29 = 0; _i29 < _size24; ++_i29)
        {
          var elem30 = null;
          elem30 = input.readString();
          this.ID.push(elem30);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteTerms_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteTerms_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.ID !== null && this.ID !== undefined) {
    output.writeFieldBegin('ID', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.ID.length);
    for (var iter31 in this.ID)
    {
      if (this.ID.hasOwnProperty(iter31))
      {
        iter31 = this.ID[iter31];
        output.writeString(iter31);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteTerms_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdminService_deleteTerms_result.prototype = {};
AdminService_deleteTerms_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteTerms_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteTerms_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteIndex_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
AdminService_deleteIndex_args.prototype = {};
AdminService_deleteIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteIndex_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteIndex_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_deleteIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdminService_deleteIndex_result.prototype = {};
AdminService_deleteIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_deleteIndex_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_deleteIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_truncateIndex_args = function(args) {
  this.index = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
  }
};
AdminService_truncateIndex_args.prototype = {};
AdminService_truncateIndex_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_truncateIndex_args.prototype.write = function(output) {
  output.writeStructBegin('AdminService_truncateIndex_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminService_truncateIndex_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
AdminService_truncateIndex_result.prototype = {};
AdminService_truncateIndex_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I64) {
        this.success = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

AdminService_truncateIndex_result.prototype.write = function(output) {
  output.writeStructBegin('AdminService_truncateIndex_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I64, 0);
    output.writeI64(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

AdminServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
AdminServiceClient.prototype = {};
AdminServiceClient.prototype.addSingleTerm = function(index, ID, inputs, outputField, payload, weight, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addSingleTerm(index, ID, inputs, outputField, payload, weight);
};

AdminServiceClient.prototype.send_addSingleTerm = function(index, ID, inputs, outputField, payload, weight) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addSingleTerm', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_addSingleTerm_args();
  args.index = index;
  args.ID = ID;
  args.inputs = inputs;
  args.outputField = outputField;
  args.payload = payload;
  args.weight = weight;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_addSingleTerm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_addSingleTerm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addSingleTerm failed: unknown result');
};
AdminServiceClient.prototype.addTerms = function(index, terms, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_addTerms(index, terms);
};

AdminServiceClient.prototype.send_addTerms = function(index, terms) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('addTerms', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_addTerms_args();
  args.index = index;
  args.terms = terms;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_addTerms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_addTerms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('addTerms failed: unknown result');
};
AdminServiceClient.prototype.deleteSingleTerm = function(index, ID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteSingleTerm(index, ID);
};

AdminServiceClient.prototype.send_deleteSingleTerm = function(index, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteSingleTerm', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_deleteSingleTerm_args();
  args.index = index;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_deleteSingleTerm = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_deleteSingleTerm_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteSingleTerm failed: unknown result');
};
AdminServiceClient.prototype.deleteTerms = function(index, ID, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteTerms(index, ID);
};

AdminServiceClient.prototype.send_deleteTerms = function(index, ID) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteTerms', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_deleteTerms_args();
  args.index = index;
  args.ID = ID;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_deleteTerms = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_deleteTerms_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteTerms failed: unknown result');
};
AdminServiceClient.prototype.deleteIndex = function(index, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_deleteIndex(index);
};

AdminServiceClient.prototype.send_deleteIndex = function(index) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('deleteIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_deleteIndex_args();
  args.index = index;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_deleteIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_deleteIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('deleteIndex failed: unknown result');
};
AdminServiceClient.prototype.truncateIndex = function(index, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_truncateIndex(index);
};

AdminServiceClient.prototype.send_truncateIndex = function(index) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('truncateIndex', Thrift.MessageType.CALL, this.seqid);
  var args = new AdminService_truncateIndex_args();
  args.index = index;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

AdminServiceClient.prototype.recv_truncateIndex = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new AdminService_truncateIndex_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('truncateIndex failed: unknown result');
};
AdminServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
AdminServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

AdminServiceProcessor.prototype.process_addSingleTerm = function(seqid, input, output) {
  var args = new AdminService_addSingleTerm_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addSingleTerm(args.index, args.ID, args.inputs, args.outputField, args.payload, args.weight, function (err, result) {
    var result = new AdminService_addSingleTerm_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addSingleTerm", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AdminServiceProcessor.prototype.process_addTerms = function(seqid, input, output) {
  var args = new AdminService_addTerms_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.addTerms(args.index, args.terms, function (err, result) {
    var result = new AdminService_addTerms_result((err != null ? err : {success: result}));
    output.writeMessageBegin("addTerms", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AdminServiceProcessor.prototype.process_deleteSingleTerm = function(seqid, input, output) {
  var args = new AdminService_deleteSingleTerm_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteSingleTerm(args.index, args.ID, function (err, result) {
    var result = new AdminService_deleteSingleTerm_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteSingleTerm", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AdminServiceProcessor.prototype.process_deleteTerms = function(seqid, input, output) {
  var args = new AdminService_deleteTerms_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteTerms(args.index, args.ID, function (err, result) {
    var result = new AdminService_deleteTerms_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteTerms", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AdminServiceProcessor.prototype.process_deleteIndex = function(seqid, input, output) {
  var args = new AdminService_deleteIndex_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.deleteIndex(args.index, function (err, result) {
    var result = new AdminService_deleteIndex_result((err != null ? err : {success: result}));
    output.writeMessageBegin("deleteIndex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

AdminServiceProcessor.prototype.process_truncateIndex = function(seqid, input, output) {
  var args = new AdminService_truncateIndex_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.truncateIndex(args.index, function (err, result) {
    var result = new AdminService_truncateIndex_result((err != null ? err : {success: result}));
    output.writeMessageBegin("truncateIndex", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

