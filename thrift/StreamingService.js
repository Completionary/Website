//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var exceptions_ttypes = require('./exceptions_types')


var ttypes = require('./streaming_types');
//HELPER FUNCTIONS AND STRUCTURES

StreamingService_establishStream_args = function(args) {
  this.index = null;
  this.hostName = null;
  this.port = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.hostName !== undefined) {
      this.hostName = args.hostName;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
StreamingService_establishStream_args.prototype = {};
StreamingService_establishStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingService_establishStream_args.prototype.write = function(output) {
  output.writeStructBegin('StreamingService_establishStream_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.hostName !== null && this.hostName !== undefined) {
    output.writeFieldBegin('hostName', Thrift.Type.STRING, 2);
    output.writeString(this.hostName);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingService_establishStream_result = function(args) {
  this.indexUnkown = null;
  this.unableToConnect = null;
  if (args instanceof exceptions_ttypes.IndexUnknownException) {
    this.indexUnkown = args;
    return;
  }
  if (args instanceof ttypes.UnableToConnectToStreamingClientException) {
    this.unableToConnect = args;
    return;
  }
  if (args) {
    if (args.indexUnkown !== undefined) {
      this.indexUnkown = args.indexUnkown;
    }
    if (args.unableToConnect !== undefined) {
      this.unableToConnect = args.unableToConnect;
    }
  }
};
StreamingService_establishStream_result.prototype = {};
StreamingService_establishStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.indexUnkown = new exceptions_ttypes.IndexUnknownException();
        this.indexUnkown.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.unableToConnect = new ttypes.UnableToConnectToStreamingClientException();
        this.unableToConnect.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingService_establishStream_result.prototype.write = function(output) {
  output.writeStructBegin('StreamingService_establishStream_result');
  if (this.indexUnkown !== null && this.indexUnkown !== undefined) {
    output.writeFieldBegin('indexUnkown', Thrift.Type.STRUCT, 1);
    this.indexUnkown.write(output);
    output.writeFieldEnd();
  }
  if (this.unableToConnect !== null && this.unableToConnect !== undefined) {
    output.writeFieldBegin('unableToConnect', Thrift.Type.STRUCT, 2);
    this.unableToConnect.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingService_disconnectStream_args = function(args) {
  this.index = null;
  this.hostName = null;
  this.port = null;
  if (args) {
    if (args.index !== undefined) {
      this.index = args.index;
    }
    if (args.hostName !== undefined) {
      this.hostName = args.hostName;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
StreamingService_disconnectStream_args.prototype = {};
StreamingService_disconnectStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.index = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.hostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingService_disconnectStream_args.prototype.write = function(output) {
  output.writeStructBegin('StreamingService_disconnectStream_args');
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.STRING, 1);
    output.writeString(this.index);
    output.writeFieldEnd();
  }
  if (this.hostName !== null && this.hostName !== undefined) {
    output.writeFieldBegin('hostName', Thrift.Type.STRING, 2);
    output.writeString(this.hostName);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 3);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingService_disconnectStream_result = function(args) {
};
StreamingService_disconnectStream_result.prototype = {};
StreamingService_disconnectStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingService_disconnectStream_result.prototype.write = function(output) {
  output.writeStructBegin('StreamingService_disconnectStream_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingService_disconnectFromStatisticStream_args = function(args) {
  this.hostName = null;
  this.port = null;
  if (args) {
    if (args.hostName !== undefined) {
      this.hostName = args.hostName;
    }
    if (args.port !== undefined) {
      this.port = args.port;
    }
  }
};
StreamingService_disconnectFromStatisticStream_args.prototype = {};
StreamingService_disconnectFromStatisticStream_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hostName = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.port = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingService_disconnectFromStatisticStream_args.prototype.write = function(output) {
  output.writeStructBegin('StreamingService_disconnectFromStatisticStream_args');
  if (this.hostName !== null && this.hostName !== undefined) {
    output.writeFieldBegin('hostName', Thrift.Type.STRING, 1);
    output.writeString(this.hostName);
    output.writeFieldEnd();
  }
  if (this.port !== null && this.port !== undefined) {
    output.writeFieldBegin('port', Thrift.Type.I32, 2);
    output.writeI32(this.port);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingService_disconnectFromStatisticStream_result = function(args) {
};
StreamingService_disconnectFromStatisticStream_result.prototype = {};
StreamingService_disconnectFromStatisticStream_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingService_disconnectFromStatisticStream_result.prototype.write = function(output) {
  output.writeStructBegin('StreamingService_disconnectFromStatisticStream_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
StreamingServiceClient.prototype = {};
StreamingServiceClient.prototype.establishStream = function(index, hostName, port, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_establishStream(index, hostName, port);
};

StreamingServiceClient.prototype.send_establishStream = function(index, hostName, port) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('establishStream', Thrift.MessageType.CALL, this.seqid);
  var args = new StreamingService_establishStream_args();
  args.index = index;
  args.hostName = hostName;
  args.port = port;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StreamingServiceClient.prototype.recv_establishStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StreamingService_establishStream_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.indexUnkown) {
    return callback(result.indexUnkown);
  }
  if (null !== result.unableToConnect) {
    return callback(result.unableToConnect);
  }
  callback(null)
};
StreamingServiceClient.prototype.disconnectStream = function(index, hostName, port, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_disconnectStream(index, hostName, port);
};

StreamingServiceClient.prototype.send_disconnectStream = function(index, hostName, port) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disconnectStream', Thrift.MessageType.CALL, this.seqid);
  var args = new StreamingService_disconnectStream_args();
  args.index = index;
  args.hostName = hostName;
  args.port = port;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StreamingServiceClient.prototype.recv_disconnectStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StreamingService_disconnectStream_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
StreamingServiceClient.prototype.disconnectFromStatisticStream = function(hostName, port, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_disconnectFromStatisticStream(hostName, port);
};

StreamingServiceClient.prototype.send_disconnectFromStatisticStream = function(hostName, port) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('disconnectFromStatisticStream', Thrift.MessageType.CALL, this.seqid);
  var args = new StreamingService_disconnectFromStatisticStream_args();
  args.hostName = hostName;
  args.port = port;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StreamingServiceClient.prototype.recv_disconnectFromStatisticStream = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StreamingService_disconnectFromStatisticStream_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
StreamingServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
StreamingServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

StreamingServiceProcessor.prototype.process_establishStream = function(seqid, input, output) {
  var args = new StreamingService_establishStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.establishStream(args.index, args.hostName, args.port, function (err, result) {
    var result = new StreamingService_establishStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("establishStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

StreamingServiceProcessor.prototype.process_disconnectStream = function(seqid, input, output) {
  var args = new StreamingService_disconnectStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.disconnectStream(args.index, args.hostName, args.port, function (err, result) {
    var result = new StreamingService_disconnectStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("disconnectStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

StreamingServiceProcessor.prototype.process_disconnectFromStatisticStream = function(seqid, input, output) {
  var args = new StreamingService_disconnectFromStatisticStream_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.disconnectFromStatisticStream(args.hostName, args.port, function (err, result) {
    var result = new StreamingService_disconnectFromStatisticStream_result((err != null ? err : {success: result}));
    output.writeMessageBegin("disconnectFromStatisticStream", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

