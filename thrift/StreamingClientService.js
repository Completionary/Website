//
// Autogenerated by Thrift Compiler (0.9.1)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var Thrift = require('thrift').Thrift;
var exceptions_ttypes = require('./exceptions_types')


var ttypes = require('./streaming_types');
//HELPER FUNCTIONS AND STRUCTURES

StreamingClientService_updateStatistics_args = function(args) {
  this.stream = null;
  if (args) {
    if (args.stream !== undefined) {
      this.stream = args.stream;
    }
  }
};
StreamingClientService_updateStatistics_args.prototype = {};
StreamingClientService_updateStatistics_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.stream = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var key14 = null;
          var val15 = null;
          key14 = input.readString();
          val15 = new ttypes.StreamedStatisticsField();
          val15.read(input);
          this.stream[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingClientService_updateStatistics_args.prototype.write = function(output) {
  output.writeStructBegin('StreamingClientService_updateStatistics_args');
  if (this.stream !== null && this.stream !== undefined) {
    output.writeFieldBegin('stream', Thrift.Type.MAP, 1);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRUCT, Thrift.objectLength(this.stream));
    for (var kiter16 in this.stream)
    {
      if (this.stream.hasOwnProperty(kiter16))
      {
        var viter17 = this.stream[kiter16];
        output.writeString(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingClientService_updateStatistics_result = function(args) {
};
StreamingClientService_updateStatistics_result.prototype = {};
StreamingClientService_updateStatistics_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StreamingClientService_updateStatistics_result.prototype.write = function(output) {
  output.writeStructBegin('StreamingClientService_updateStatistics_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StreamingClientServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this.seqid = 0;
    this._reqs = {};
};
StreamingClientServiceClient.prototype = {};
StreamingClientServiceClient.prototype.updateStatistics = function(stream, callback) {
  this.seqid += 1;
  this._reqs[this.seqid] = callback;
  this.send_updateStatistics(stream);
};

StreamingClientServiceClient.prototype.send_updateStatistics = function(stream) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('updateStatistics', Thrift.MessageType.CALL, this.seqid);
  var args = new StreamingClientService_updateStatistics_args();
  args.stream = stream;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

StreamingClientServiceClient.prototype.recv_updateStatistics = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new StreamingClientService_updateStatistics_result();
  result.read(input);
  input.readMessageEnd();

  callback(null)
};
StreamingClientServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
StreamingClientServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.Exception, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

StreamingClientServiceProcessor.prototype.process_updateStatistics = function(seqid, input, output) {
  var args = new StreamingClientService_updateStatistics_args();
  args.read(input);
  input.readMessageEnd();
  this._handler.updateStatistics(args.stream, function (err, result) {
    var result = new StreamingClientService_updateStatistics_result((err != null ? err : {success: result}));
    output.writeMessageBegin("updateStatistics", Thrift.MessageType.REPLY, seqid);
    result.write(output);
    output.writeMessageEnd();
    output.flush();
  })
}

